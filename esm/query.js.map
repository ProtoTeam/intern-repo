{"version":3,"file":"query.js","sourceRoot":"","sources":["../src/query.ts"],"names":[],"mappings":"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","sourcesContent":["import { Data, Field } from './types';\nimport { map, groupBy, orderBy, isEmpty, pick, forIn, maxBy, sumBy, minBy } from 'lodash';\n\nexport class Query {\n  private data;\n  // select 数据 ['id', 'score']\n  private _select = [];\n  // 排序字段 { fields : 'score', asc : true}\n  private _orderby;\n  // 分组字段 'subject'\n  private _groupby;\n  // 存储分组\n  private _groupColumn;\n  // 取条数 2\n  private _limit;\n  // 计算字段 { aggregate: 'sum' field: 'score', }\n  private _caculate;\n\n  constructor(data: Data) {\n    this.data = data;\n  }\n\n  /**\n   * 选择字段\n   * @param fields\n   */\n  public select(...fields: Field[]): Query {\n    map(fields, (field) => {\n      // 找出计算值\n      if (field.aggregate !== 'raw') {\n        this._caculate = field;\n      }\n      // 找出所有select值\n      this._select.push(field.field);\n    });\n    return this;\n  }\n\n  /**\n   * 按照字段排序 默认降序\n   * @param field\n   * @param asc\n   */\n  public orderBy(fields: string, asc?: boolean): Query {\n    this._orderby = {\n      fields,\n      asc,\n    };\n    return this;\n  }\n\n  /**\n   * 按照字段分组\n   * @param asc\n   * @param fields\n   */\n  public groupBy(fields: string): Query {\n    this._groupby = fields;\n    return this;\n  }\n\n  /**\n   * 取 n 条数据\n   * @param n\n   */\n  public limit(n: number): Query {\n    this._limit = n;\n    return this;\n  }\n\n  /**\n   * 计算分组聚合信息\n   * @param data 分组数组\n   * @param field 聚合字段\n   * @param data 聚合条件\n   */\n  public caculate(data: [], field: string, operator: string) {\n    switch (operator) {\n      case 'sum':\n        return {\n          field: sumBy(data, field),\n        };\n      case 'min':\n        return minBy(data, field);\n      case 'max':\n        return maxBy(data, field);\n    }\n  }\n\n  /**\n   * 返回最后的查询数据\n   */\n  public record(): Data {\n    // 处理分组\n    if (this._groupby) this._groupColumn = groupBy(this.data, this._groupby);\n\n    // 处理求值 max min sum\n    if (this._caculate) {\n      // max\n      const type = this._caculate.aggregate;\n      // score\n      const field = this._caculate.field;\n      if (this._groupColumn) {\n        this.data = [];\n        forIn(this._groupColumn, (item) => {\n          this.data.push(this.caculate(item, field, type));\n        });\n      } else {\n        // 当不存在分组的时候，处理原始数据 只有一条数据\n        this.data = [this.caculate(this.data, field, type)];\n      }\n    }\n\n    //处理排序\n    if (this._orderby) this.data = orderBy(this.data, this._orderby.fields, this._orderby.asc);\n\n    //处理 limit\n    if (this._limit) this.data = this.data.slice(0, this._limit);\n\n    //处理select ['id', 'score']\n    if (!isEmpty(this._select)) {\n      this.data = map(this.data, (item) => pick(item, this._select));\n    }\n\n    return this.data;\n  }\n}\n"]}